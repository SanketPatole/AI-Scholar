AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application Model template describing your function.

Parameters:
  StackName:
    Type: String
    Description: The name of the stack to prefix to resources
  VectorDBLayerVersionArn:
    Type: String
    Description: ARN of the Lambda layer
  CommonLayerVersionArn:
    Type: String
    Description: ARN of the Lambda layer

Resources:

  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-Raw_Data_S3"
      AttributeDefinitions:
        - AttributeName: CLASS_SUBJECT
          AttributeType: S
        - AttributeName: CHAPTER
          AttributeType: S
      KeySchema:
        - AttributeName: CLASS_SUBJECT
          KeyType: HASH  # Partition key
        - AttributeName: CHAPTER
          KeyType: RANGE  # Sort key
      BillingMode: PAY_PER_REQUEST

  VectorStoresAIScholarBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${StackName}-vectorstores-aischolar"

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${StackName}-frontend"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET', 'HEAD']
            AllowedOrigins: ['*']
            ExposeHeaders: ['x-amz-server-side-encryption']

  DoubtSolvingAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${StackName}-DoubtSolvingAPI"
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  NotesGenerationAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${StackName}-NotesGenerationAPI"
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  TestGenerationAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${StackName}-TestGenerationAPI"
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  MyOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for accessing S3 from CloudFront

  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: AI Scholar Frontend Distribution
        DefaultRootObject: index.html
        Origins:
          - Id: FrontendOrigin
            DomainName: !GetAtt FrontendBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${MyOAI}'
        DefaultCacheBehavior:
          TargetOriginId: FrontendOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100


  DoubtSolving:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-DoubtSolving"
      CodeUri: src/Backend/Lambda/Features/Doubt_Solving/
      Description: ''
      MemorySize: 512
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          BUCKET_NAME: !Ref VectorStoresAIScholarBucket
          OPENAI_API_KEY: '{{resolve:ssm:/myapp/openai_api_key:1}}'
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
        - !Ref VectorDBLayerVersionArn
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackName}-Doubt_Solving:*'
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:List*
                - s3:Describe*
                - s3-object-lambda:Get*
                - s3-object-lambda:List*
              Resource: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/myapp/openai_api_key
      SnapStart:
        ApplyOn: None
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /Doubt_Solving
            Method: ANY
            RestApiId:
              Ref: DoubtSolvingAPI
        Api2:
          Type: Api
          Properties:
            Path: /Doubt_Solving
            Method: GET
            RestApiId:
              Ref: DoubtSolvingAPI
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

  NotesGeneration:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-NotesGeneration"
      CodeUri: src/Backend/Lambda/Features/Notes_Generation/
      Description: ''
      MemorySize: 512
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          BUCKET_NAME: !Ref VectorStoresAIScholarBucket
          OPENAI_API_KEY: '{{resolve:ssm:/myapp/openai_api_key:1}}'
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
        - !Ref VectorDBLayerVersionArn
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackName}-Notes_Generation:*'
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:List*
                - s3:Describe*
                - s3-object-lambda:Get*
                - s3-object-lambda:List*
              Resource: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/myapp/openai_api_key
      SnapStart:
        ApplyOn: None
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /Notes_Generation
            Method: ANY
            RestApiId:
              Ref: NotesGenerationAPI
        Api2:
          Type: Api
          Properties:
            Path: /Notes_Generation
            Method: GET
            RestApiId:
              Ref: NotesGenerationAPI
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

  TestGeneration:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-TestGeneration"
      CodeUri: src/Backend/Lambda/Features/Test_Generation/
      Description: ''
      MemorySize: 512
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          BUCKET_NAME: !Ref VectorStoresAIScholarBucket
          OPENAI_API_KEY: '{{resolve:ssm:/myapp/openai_api_key:1}}'
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
        - !Ref VectorDBLayerVersionArn
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackName}-Test_Generation:*'
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:List*
                - s3:Describe*
                - s3-object-lambda:Get*
                - s3-object-lambda:List*
              Resource: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: ssm:GetParameter
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/myapp/openai_api_key
      SnapStart:
        ApplyOn: None
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /Test_Generation
            Method: ANY
            RestApiId:
              Ref: TestGenerationAPI
        Api2:
          Type: Api
          Properties:
            Path: /Test_Generation
            Method: GET
            RestApiId:
              Ref: TestGenerationAPI
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

  RawDataToDynamoDB:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-RawDataToDynamoDB"
      CodeUri: src/Backend/Lambda/Admin/Raw_Data_To_DynamoDB/
      Description: ''
      MemorySize: 512
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref MyDynamoDBTable
      EventInvokeConfig:
        DestinationConfig: {}
        MaximumEventAgeInSeconds: 1800
        MaximumRetryAttempts: 0
      Layers:
        - !Ref CommonLayerVersionArn
      PackageType: Zip
      Policies:
        - Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - lambda:InvokeFunctionUrl
                - lambda:InvokeFunction
                - lambda:InvokeAsync
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackName}-Raw_Data_To_DynamoDB:*'
            - Action:
                - dynamodb:*
                - dax:*
                - application-autoscaling:DeleteScalingPolicy
                - application-autoscaling:DeregisterScalableTarget
                - application-autoscaling:DescribeScalableTargets
                - application-autoscaling:DescribeScalingActivities
                - application-autoscaling:DescribeScalingPolicies
                - application-autoscaling:PutScalingPolicy
                - application-autoscaling:RegisterScalableTarget
                - cloudwatch:DeleteAlarms
                - cloudwatch:DescribeAlarmHistory
                - cloudwatch:DescribeAlarms
                - cloudwatch:DescribeAlarmsForMetric
                - cloudwatch:GetMetricStatistics
                - cloudwatch:ListMetrics
                - cloudwatch:PutMetricAlarm
                - cloudwatch:GetMetricData
                - datapipeline:ActivatePipeline
                - datapipeline:CreatePipeline
                - datapipeline:DeletePipeline
                - datapipeline:DescribeObjects
                - datapipeline:DescribePipelines
                - datapipeline:GetPipelineDefinition
                - datapipeline:ListPipelines
                - datapipeline:PutPipelineDefinition
                - datapipeline:QueryObjects
                - ec2:DescribeVpcs
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
                - iam:GetRole
                - iam:ListRoles
                - kms:DescribeKey
                - kms:ListAliases
                - sns:CreateTopic
                - sns:DeleteTopic
                - sns:ListSubscriptions
                - sns:ListSubscriptionsByTopic
                - sns:ListTopics
                - sns:Subscribe
                - sns:Unsubscribe
                - sns:SetTopicAttributes
                - lambda:CreateFunction
                - lambda:ListFunctions
                - lambda:ListEventSourceMappings
                - lambda:CreateEventSourceMapping
                - lambda:DeleteEventSourceMapping
                - lambda:GetFunctionConfiguration
                - lambda:DeleteFunction
                - resource-groups:ListGroups
                - resource-groups:ListGroupResources
                - resource-groups:GetGroup
                - resource-groups:GetGroupQuery
                - resource-groups:DeleteGroup
                - resource-groups:CreateGroup
                - tag:GetResources
                - kinesis:ListStreams
                - kinesis:DescribeStream
                - kinesis:DescribeStreamSummary
              Effect: Allow
              Resource: '*'
            - Action:
                - cloudwatch:GetInsightRuleReport
              Effect: Allow
              Resource: arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*
            - Action:
                - iam:PassRole
              Effect: Allow
              Resource: '*'
              Condition:
                StringLike:
                  iam:PassedToService:
                    - application-autoscaling.amazonaws.com
                    - application-autoscaling.amazonaws.com.cn
                    - dax.amazonaws.com
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource: '*'
              Condition:
                StringEquals:
                  iam:AWSServiceName:
                    - replication.dynamodb.amazonaws.com
                    - dax.amazonaws.com
                    - dynamodb.application-autoscaling.amazonaws.com
                    - contributorinsights.dynamodb.amazonaws.com
                    - kinesisreplication.dynamodb.amazonaws.com
      SnapStart:
        ApplyOn: None
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto

  DynamoDBToVectorDB:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-DynamoDBToVectorDB"
      CodeUri: src/Backend/Lambda/Admin/DynamoDB_To_VectorDB/
      Description: ''
      MemorySize: 512
      Timeout: 900
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Environment:
        Variables:
          BUCKET_NAME: !Ref VectorStoresAIScholarBucket
          DYNAMODB_TABLE_NAME: !Ref MyDynamoDBTable
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
        - !Ref VectorDBLayerVersionArn
      PackageType: Zip
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackName}-DynamoDB_To_VectorDB:*
            - Action:
                - dynamodb:*
                - dax:*
                - application-autoscaling:DeleteScalingPolicy
                - application-autoscaling:DeregisterScalableTarget
                - application-autoscaling:DescribeScalableTargets
                - application-autoscaling:DescribeScalingActivities
                - application-autoscaling:DescribeScalingPolicies
                - application-autoscaling:PutScalingPolicy
                - application-autoscaling:RegisterScalableTarget
                - cloudwatch:DeleteAlarms
                - cloudwatch:DescribeAlarmHistory
                - cloudwatch:DescribeAlarms
                - cloudwatch:DescribeAlarmsForMetric
                - cloudwatch:GetMetricStatistics
                - cloudwatch:ListMetrics
                - cloudwatch:PutMetricAlarm
                - cloudwatch:GetMetricData
                - datapipeline:ActivatePipeline
                - datapipeline:CreatePipeline
                - datapipeline:DeletePipeline
                - datapipeline:DescribeObjects
                - datapipeline:DescribePipelines
                - datapipeline:GetPipelineDefinition
                - datapipeline:ListPipelines
                - datapipeline:PutPipelineDefinition
                - datapipeline:QueryObjects
                - ec2:DescribeVpcs
                - ec2:DescribeSubnets
                - ec2:DescribeSecurityGroups
                - iam:GetRole
                - iam:ListRoles
                - kms:DescribeKey
                - kms:ListAliases
                - sns:CreateTopic
                - sns:DeleteTopic
                - sns:ListSubscriptions
                - sns:ListSubscriptionsByTopic
                - sns:ListTopics
                - sns:Subscribe
                - sns:Unsubscribe
                - sns:SetTopicAttributes
                - lambda:CreateFunction
                - lambda:ListFunctions
                - lambda:ListEventSourceMappings
                - lambda:CreateEventSourceMapping
                - lambda:DeleteEventSourceMapping
                - lambda:GetFunctionConfiguration
                - lambda:DeleteFunction
                - resource-groups:ListGroups
                - resource-groups:ListGroupResources
                - resource-groups:GetGroup
                - resource-groups:GetGroupQuery
                - resource-groups:DeleteGroup
                - resource-groups:CreateGroup
                - tag:GetResources
                - kinesis:ListStreams
                - kinesis:DescribeStream
                - kinesis:DescribeStreamSummary
              Effect: Allow
              Resource: '*'
            - Action:
                - cloudwatch:GetInsightRuleReport
              Effect: Allow
              Resource: arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*
            - Action:
                - iam:PassRole
              Effect: Allow
              Resource: '*'
              Condition:
                StringLike:
                  iam:PassedToService:
                    - application-autoscaling.amazonaws.com
                    - application-autoscaling.amazonaws.com.cn
                    - dax.amazonaws.com
            - Effect: Allow
              Action:
                - iam:CreateServiceLinkedRole
              Resource: '*'
              Condition:
                StringEquals:
                  iam:AWSServiceName:
                    - replication.dynamodb.amazonaws.com
                    - dax.amazonaws.com
                    - dynamodb.application-autoscaling.amazonaws.com
                    - contributorinsights.dynamodb.amazonaws.com
                    - kinesisreplication.dynamodb.amazonaws.com
            - Effect: Allow
              Action:
                - s3:*
                - s3-object-lambda:*
              Resource: '*'
      SnapStart:
        ApplyOn: None
      RuntimeManagementConfig:
        UpdateRuntimeOn: Auto


Outputs:
  CloudFrontDistributionID:
    Description: The CloudFront Distribution ID
    Value: !Ref FrontendDistribution

  MyOAIID:
    Description: The MyOAI ID
    Value: !Ref MyOAI
