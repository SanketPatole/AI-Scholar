name: Deploy AWS Lambda and Layer

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      StackName: aischolarstack
      AWS_REGION: us-east-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install awscli
          pip install aws-sam-cli

      - name: Fetch AWS Account ID
        id: fetch_account_id
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set Dynamic Environment Variables
        run: |
          echo "LAMBDA_LAYERS_BUCKET=${StackName}-lambda-layer" >> $GITHUB_ENV
          echo "FRONTEND_BUCKET=${StackName}-frontend" >> $GITHUB_ENV
          echo "SAM_DEPLOYMENT_BUCKET=${StackName}-sam-deployment" >> $GITHUB_ENV
        env:
          StackName: ${{ env.StackName }}

      - name: Upload Lambda Layer ZIP to S3
        run: |
          aws s3 ls "s3://${{ env.LAMBDA_LAYERS_BUCKET }}" || aws s3 mb "s3://${{ env.LAMBDA_LAYERS_BUCKET }}"
          aws s3 ls "s3://${{ env.SAM_DEPLOYMENT_BUCKET }}" || aws s3 mb "s3://${{ env.SAM_DEPLOYMENT_BUCKET }}"
          aws s3 cp src/Backend/Lambda\ Layer/vector_db.zip s3://${{ env.LAMBDA_LAYERS_BUCKET }}/vector_db.zip
          aws s3 cp src/Backend/Lambda\ Layer/common_layer.zip s3://${{ env.LAMBDA_LAYERS_BUCKET }}/common_layer.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Publish Lambda Layer from S3
        run: |
          VECTOR_DB_LAYER_VERSION_ARN=$(aws lambda publish-layer-version --layer-name vector_db --description "Vector DB Layer" --content S3Bucket=${{ env.LAMBDA_LAYERS_BUCKET }},S3Key=vector_db.zip --compatible-runtimes python3.9 --region ${{ env.AWS_REGION }} --query LayerVersionArn --output text)
          COMMON_LAYER_VERSION_ARN=$(aws lambda publish-layer-version --layer-name common_layer --description "Common Layer" --content S3Bucket=${{ env.LAMBDA_LAYERS_BUCKET }},S3Key=common_layer.zip --compatible-runtimes python3.9 --region ${{ env.AWS_REGION }} --query LayerVersionArn --output text)
          echo "VECTOR_DB_LAYER_VERSION_ARN=$VECTOR_DB_LAYER_VERSION_ARN" >> $GITHUB_ENV
          echo "COMMON_LAYER_VERSION_ARN=$COMMON_LAYER_VERSION_ARN" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build SAM application
        run: sam build --template-file src/sam.yaml --base-dir . --use-container

      - name: Package SAM application
        run: sam package --output-template-file packaged.yaml --s3-bucket ${{ env.SAM_DEPLOYMENT_BUCKET }} --region ${{ env.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy SAM application
        run: |
          sam deploy --template-file packaged.yaml --stack-name ${{ env.StackName }} --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND --region ${{ env.AWS_REGION }} --parameter-overrides StackName=${{ env.StackName }} VectorDBLayerVersionArn=${{ env.VECTOR_DB_LAYER_VERSION_ARN }} CommonLayerVersionArn=${{ env.COMMON_LAYER_VERSION_ARN }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Retrieve CloudFront Distribution and OAI IDs
        id: get_ids
        run: |
          CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name ${{ env.StackName }} --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionID'].OutputValue" --output text --region ${{ env.AWS_REGION }})
          echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID" >> $GITHUB_ENV
          echo "::set-output name=CLOUDFRONT_DISTRIBUTION_ID::$CLOUDFRONT_DISTRIBUTION_ID"
          
          MY_OAI_ID=$(aws cloudformation describe-stacks --stack-name ${{ env.StackName }} --query "Stacks[0].Outputs[?OutputKey=='MyOAIID'].OutputValue" --output text --region ${{ env.AWS_REGION }})
          echo "MY_OAI_ID=$MY_OAI_ID" >> $GITHUB_ENV
          echo "::set-output name=MY_OAI_ID::$MY_OAI_ID"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Set S3 Bucket Policy for CloudFront Access
        run: |
          POLICY=$(cat <<EOF
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {"AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAI_ID}"},
                      "Action": "s3:GetObject",
                      "Resource": "arn:aws:s3:::${{ env.FRONTEND_BUCKET }}/*"
                  }
              ]
          }
          EOF
          )
          aws s3api put-bucket-policy --bucket ${{ env.FRONTEND_BUCKET }} --policy "$POLICY"
        env:
          OAI_ID: ${{ env.OAI_ID }} # Ensure this is defined in your secrets or environment variables
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Node.js dependencies
        run: npm install
        working-directory: src/Frontend/

      - name: Build Vue.js application
        run: npm run build
        working-directory: src/Frontend/

      - name: Deploy Frontend to S3
        run: |
          aws s3 sync src/Frontend/dist s3://${{ env.FRONTEND_BUCKET }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Invalidate CloudFront Distribution
        run: |
          if [ -n "${CLOUDFRONT_DISTRIBUTION_ID}" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          else
            echo "CloudFront distribution ID not set. Skipping invalidation."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

